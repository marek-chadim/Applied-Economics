dev.off()
###
x <- seq(1, 10)
x
x <- 1:10
x
x <- seq(-pi, pi, length = 50)
###
y <- x
f <- outer(x, y, function(x, y) cos(y) / (1 + x^2))
contour(x, y, f)
contour(x, y, f, nlevels = 45, add = T)
fa <- (f - t(f)) / 2
contour(x, y, fa, nlevels = 15)
###
image(x, y, fa)
persp(x, y, fa)
persp(x, y, fa, theta = 30)
persp(x, y, fa, theta = 30, phi = 20)
persp(x, y, fa, theta = 30, phi = 70)
persp(x, y, fa, theta = 30, phi = 40)
###
A <- matrix(1:16, 4, 4)
A
###
A[2, 3]
###
A[c(1, 3), c(2, 4)]
A[1:3, 2:4]
A[1:2, ]
A[, 1:2]
###
A[1, ]
###
A[-c(1, 3), ]
A[-c(1, 3), -c(1, 3, 4)]
###
dim(A)
###
Auto <- read.table("Auto.data")
View(Auto)
head(Auto)
###
Auto <- read.table("Auto.data", header = T, na.strings = "?", stringsAsFactors = T)
View(Auto)
###
Auto <- read.csv("Auto.csv", na.strings = "?", stringsAsFactors = T)
View(Auto)
dim(Auto)
Auto[1:4, ]
###
Auto <- na.omit(Auto)
dim(Auto)
###
names(Auto)
###
plot(cylinders, mpg)
###
plot(Auto$cylinders, Auto$mpg)
attach(Auto)
plot(cylinders, mpg)
###
cylinders <- as.factor(cylinders)
###
plot(cylinders, mpg)
plot(cylinders, mpg, col = "red")
plot(cylinders, mpg, col = "red", varwidth = T)
plot(cylinders, mpg, col = "red", varwidth = T,
horizontal = T)
plot(cylinders, mpg, col = "red", varwidth = T,
xlab = "cylinders", ylab = "MPG")
###
hist(mpg)
hist(mpg, col = 2)
hist(mpg, col = 2, breaks = 15)
###
pairs(Auto)
pairs(
~ mpg + displacement + horsepower + weight + acceleration,
data = Auto
)
###
plot(horsepower, mpg)
identify(horsepower, mpg, name)
###
summary(Auto)
###
summary(mpg)
###
###
###
###
Auto <- read.table("Auto.data")
View(Auto)
head(Auto)
###
Auto <- read.table("Auto.data", header = T, na.strings = "?", stringsAsFactors = T)
View(Auto)
###
Auto <- read.csv("Auto.csv", na.strings = "?", stringsAsFactors = T)
View(Auto)
dim(Auto)
Auto[1:4, ]
###
Auto <- na.omit(Auto)
dim(Auto)
###
names(Auto)
###
plot(cylinders, mpg)
###
plot(Auto$cylinders, Auto$mpg)
###
plot(cylinders, mpg)
###
plot(Auto$cylinders, Auto$mpg)
attach(Auto)
###
plot(Auto$cylinders, Auto$mpg)
attach(Auto)
plot(cylinders, mpg)
###
cylinders <- as.factor(cylinders)
###
plot(cylinders, mpg)
plot(cylinders, mpg, col = "red")
plot(cylinders, mpg, col = "red", varwidth = T)
plot(cylinders, mpg, col = "red", varwidth = T,
horizontal = T)
plot(cylinders, mpg, col = "red", varwidth = T,
xlab = "cylinders", ylab = "MPG")
###
hist(mpg)
hist(mpg, col = 2)
hist(mpg, col = 2, breaks = 15)
###
pairs(Auto)
pairs(
~ mpg + displacement + horsepower + weight + acceleration,
data = Auto
)
###
plot(horsepower, mpg)
identify(horsepower, mpg, name)
###
summary(Auto)
###
summary(mpg)
reticulate::repl_python()
print('fit a model with', 11, 'variables')
# print?
3 + 5
"hello" + " " + "world"
x = [3, 4, 5]
x
y = [4, 9, 7]
x + y
import numpy as np
x = np.array([3, 4, 5])
y = np.array([4, 9, 7])
x + y
x = np.array([[1, 2], [3, 4]])
x
x.ndim
x.dtype
np.array([[1, 2], [3.0, 4]]).dtype
quit
# Chunk 1
print('fit a model with', 11, 'variables')
reticulate::repl_python()
# Chunk 1
print('fit a model with', 11, 'variables')
# Chunk 2
# print?
# Chunk 3
3 + 5
# Chunk 4
"hello" + " " + "world"
# Chunk 5
x = [3, 4, 5]
x
# Chunk 6
y = [4, 9, 7]
x + y
# Chunk 7
import numpy as np
# Chunk 8
x = np.array([3, 4, 5])
y = np.array([4, 9, 7])
# Chunk 9
x + y
# Chunk 10
x = np.array([[1, 2], [3, 4]])
x
# Chunk 11
x.ndim
# Chunk 12
x.dtype
# Chunk 13
np.array([[1, 2], [3.0, 4]]).dtype
# Chunk 14
# np.array?
# Chunk 15
np.array([[1, 2], [3, 4]], float).dtype
# Chunk 16
x.shape
# Chunk 17
x = np.array([1, 2, 3, 4])
x.sum()
# Chunk 18
x = np.array([1, 2, 3, 4])
np.sum(x)
# Chunk 19
x = np.array([1, 2, 3, 4, 5, 6])
print('beginning x:\n', x)
x_reshape = x.reshape((2, 3))
print('reshaped x:\n', x_reshape)
# Chunk 20
x_reshape[0, 0]
# Chunk 21
x_reshape[1, 2]
# Chunk 22
print('x before we modify x_reshape:\n', x)
print('x_reshape before we modify x_reshape:\n', x_reshape)
x_reshape[0, 0] = 5
print('x_reshape after we modify its top left element:\n', x_reshape)
print('x after we modify top left element of x_reshape:\n', x)
# Chunk 23
my_tuple = (3, 4, 5)
my_tuple[0] = 2
# Chunk 24
x_reshape.shape, x_reshape.ndim, x_reshape.T
# Chunk 25
np.sqrt(x)
# Chunk 26
x**2
# Chunk 27
x**0.5
# Chunk 28
x = np.random.normal(size=50)
x
# Chunk 29
y = x + np.random.normal(loc=50, scale=1, size=50)
# Chunk 30
np.corrcoef(x, y)
# Chunk 31
print(np.random.normal(scale=5, size=2))
print(np.random.normal(scale=5, size=2))
# Chunk 32
rng = np.random.default_rng(1303)
print(rng.normal(scale=5, size=2))
rng2 = np.random.default_rng(1303)
print(rng2.normal(scale=5, size=2))
# Chunk 33
rng = np.random.default_rng(3)
y = rng.standard_normal(10)
np.mean(y), y.mean()
# Chunk 34
np.var(y), y.var(), np.mean((y - y.mean())**2)
# Chunk 35
np.sqrt(np.var(y)), np.std(y)
# Chunk 36
X = rng.standard_normal((10, 3))
X
# Chunk 37
X.mean(axis=0)
# Chunk 38
X.mean(0)
# Chunk 39
from matplotlib.pyplot import subplots
fig, ax = subplots(figsize=(8, 8))
x = rng.standard_normal(100)
y = rng.standard_normal(100)
ax.plot(x, y);
# Chunk 40
output = subplots(figsize=(8, 8))
fig = output[0]
ax = output[1]
# Chunk 41
fig, ax = subplots(figsize=(8, 8))
ax.plot(x, y, 'o');
# Chunk 42
fig, ax = subplots(figsize=(8, 8))
ax.scatter(x, y, marker='o');
# Chunk 43
fig, ax = subplots(figsize=(8, 8))
ax.scatter(x, y, marker='o')
# Chunk 44
fig, ax = subplots(figsize=(8, 8))
ax.scatter(x, y, marker='o')
ax.set_xlabel("this is the x-axis")
ax.set_ylabel("this is the y-axis")
ax.set_title("Plot of X vs Y");
# Chunk 45
fig.set_size_inches(12,3)
fig
# Chunk 46
fig, axes = subplots(nrows=2,
ncols=3,
figsize=(15, 5))
# Chunk 47
axes[0,1].plot(x, y, 'o')
axes[1,2].scatter(x, y, marker='+')
fig
# Chunk 48
fig.savefig("Figure.png", dpi=400)
fig.savefig("Figure.pdf", dpi=200);
# Chunk 49
axes[0,1].set_xlim([-1,1])
fig.savefig("Figure_updated.jpg")
fig
# Chunk 50
fig, ax = subplots(figsize=(8, 8))
x = np.linspace(-np.pi, np.pi, 50)
y = x
f = np.multiply.outer(np.cos(y), 1 / (1 + x**2))
ax.contour(x, y, f);
# Chunk 51
fig, ax = subplots(figsize=(8, 8))
ax.contour(x, y, f, levels=45);
# Chunk 52
fig, ax = subplots(figsize=(8, 8))
ax.imshow(f);
# Chunk 53
seq1 = np.linspace(0, 10, 11)
seq1
# Chunk 54
seq2 = np.arange(0, 10)
seq2
# Chunk 55
"hello world"[3:6]
# Chunk 56
"hello world"[slice(3,6)]
# Chunk 57
A = np.array(np.arange(16)).reshape((4, 4))
A
# Chunk 58
A[1,2]
# Chunk 59
A[[1,3]]
# Chunk 60
A[:,[0,2]]
# Chunk 61
A[[1,3],[0,2]]
# Chunk 62
np.array([A[1,0],A[3,2]])
# Chunk 63
A[[1,3],[0,2,3]]
# Chunk 64
A[[1,3]][:,[0,2]]
# Chunk 65
idx = np.ix_([1,3],[0,2,3])
A[idx]
# Chunk 66
A[1:4:2,0:3:2]
# Chunk 67
keep_rows = np.zeros(A.shape[0], bool)
keep_rows
# Chunk 68
keep_rows[[1,3]] = True
keep_rows
# Chunk 69
np.all(keep_rows == np.array([0,1,0,1]))
# Chunk 70
A[np.array([0,1,0,1])]
# Chunk 71
A[keep_rows]
# Chunk 72
keep_cols = np.zeros(A.shape[1], bool)
keep_cols[[0, 2, 3]] = True
idx_bool = np.ix_(keep_rows, keep_cols)
A[idx_bool]
# Chunk 73
idx_mixed = np.ix_([1,3], keep_cols)
A[idx_mixed]
# Chunk 74
import pandas as pd
Auto = pd.read_csv('Auto.csv')
Auto
# Chunk 75
Auto = pd.read_csv('Auto.data', delim_whitespace=True)
# Chunk 76
Auto['horsepower']
# Chunk 77
np.unique(Auto['horsepower'])
# Chunk 78
Auto = pd.read_csv('Auto.data',
na_values=['?'],
delim_whitespace=True)
Auto['horsepower'].sum()
# Chunk 79
Auto.shape
# Chunk 80
Auto_new = Auto.dropna()
Auto_new.shape
# Chunk 81
Auto = Auto_new # overwrite the previous value
Auto.columns
# Chunk 82
Auto[:3]
# Chunk 83
idx_80 = Auto['year'] > 80
Auto[idx_80]
# Chunk 84
Auto[['mpg', 'horsepower']]
# Chunk 85
Auto.index
# Chunk 86
Auto_re = Auto.set_index('name')
Auto_re
# Chunk 87
Auto_re.columns
# Chunk 88
rows = ['amc rebel sst', 'ford torino']
Auto_re.loc[rows]
# Chunk 89
Auto_re.iloc[[3,4]]
# Chunk 90
Auto_re.iloc[:,[0,2,3]]
# Chunk 91
Auto_re.iloc[[3,4],[0,2,3]]
# Chunk 92
Auto_re.loc['ford galaxie 500', ['mpg', 'origin']]
# Chunk 93
idx_80 = Auto_re['year'] > 80
Auto_re.loc[idx_80, ['weight', 'origin']]
# Chunk 94
Auto_re.loc[lambda df: df['year'] > 80, ['weight', 'origin']]
# Chunk 95
Auto_re.loc[lambda df: (df['year'] > 80) & (df['mpg'] > 30),
['weight', 'origin']
]
# Chunk 96
Auto_re.loc[lambda df: (df['displacement'] < 300)
& (df.index.str.contains('ford')
| df.index.str.contains('datsun')),
['weight', 'origin']
]
# Chunk 97
total = 0
for value in [3,2,19]:
total += value
print('Total is: {0}'.format(total))
# Chunk 98
total = 0
for value in [2,3,19]:
for weight in [3, 2, 1]:
total += value * weight
print('Total is: {0}'.format(total))
# Chunk 99
total = 0
for value, weight in zip([2,3,19],
[0.2,0.3,0.5]):
total += weight * value
print('Weighted average is: {0}'.format(total))
quit
# Chunk 1
import numpy as np
reticulate::repl_python()
import numpy as np
import pandas as pd
from matplotlib.pyplot import subplots
from statsmodels.api import OLS
import sklearn.model_selection as skm
import sklearn.linear_model as skl
from sklearn.preprocessing import StandardScaler
from ISLP import load_data
from ISLP.models import ModelSpec as MS
from functools import partial
quit
# Chunk 1
import numpy as np
# Chunk 1
# Chunk 2
from sklearn.pipeline import Pipeline
reticulate::repl_python()
from sklearn.pipeline import Pipeline
from sklearn.decomposition import PCA
from sklearn.cross_decomposition import PLSRegression
from ISLP.models import \
(Stepwise,
sklearn_selected,
sklearn_selection_path)
# !pip install l0bnb
from l0bnb import fit_path
Hitters = load_data('Hitters')
np.isnan(Hitters['Salary']).sum()
Hitters = Hitters.dropna();
Hitters.shape
def nCp(sigma2, estimator, X, Y):
"Negative Cp statistic"
n, p = X.shape
Yhat = estimator.predict(X)
RSS = np.sum((Y - Yhat)**2)
return -(RSS + 2 * p * sigma2) / n
design = MS(Hitters.columns.drop('Salary')).fit(Hitters)
Y = np.array(Hitters['Salary'])
X = design.transform(Hitters)
sigma2 = OLS(Y,X).fit().scale
neg_Cp = partial(nCp, sigma2)
strategy = Stepwise.first_peak(design,
direction='forward',
max_terms=len(design.terms))
hitters_MSE = sklearn_selected(OLS,
strategy)
hitters_MSE.fit(Hitters, Y)
hitters_MSE.selected_state_
hitters_Cp = sklearn_selected(OLS,
strategy,
scoring=neg_Cp)
hitters_Cp.fit(Hitters, Y)
hitters_Cp.selected_state_
